#!/usr/bin/env php
<?php
declare(strict_types=1);

require_once($_composer_autoload_path ?? dirname(__DIR__) . '/vendor/autoload.php');

use CzProject\GitPhp\Git;
use CzProject\GitPhp\GitException;
use Roots\WordPressPackager\Package\Package;
use Roots\WordPressPackager\Package\Writer;
use Roots\WordPressPackager\ReleaseSources\Concerns\ReleaseType;
use Roots\WordPressPackager\ReleaseSources\SourceInterface;
use Roots\WordPressPackager\Target;
use Roots\WordPressPackager\Util\Directory;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Filesystem\Filesystem;

(new SingleCommandApplication())
    ->setName('WordPress Packager')
    ->addArgument('remote', InputArgument::REQUIRED, 'Git remote repository')
    ->addArgument('package', InputArgument::REQUIRED, 'Package name')
    ->addOption('source', null, InputOption::VALUE_REQUIRED, 'Release source', 'WPDotOrgAPI')
    ->addOption('type', 't', InputOption::VALUE_REQUIRED, 'Release type', ReleaseType::Full->value)
    ->addOption('unstable', 'u', InputOption::VALUE_NONE, 'Includes unstable releases')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln('Running WordPress Packager helper');

        $fs = new Filesystem();

        try {
            $output->writeln('-> Init repo');
            $target = new Target(
                (new Git())->cloneRepository(
                    $input->getArgument('remote'),
                    Directory::mktemp($fs)
                ),
                new Writer($fs)
            );

            $output->writeln('-> Init package template');
            $builder = new Package($input->getArgument('package'));
            $sourceClass = '\\Roots\\WordPressPackager\\ReleaseSources\\' . $input->getOption('source');

            $output->writeln('-> Fetch releases');
            /** @var SourceInterface $source */
            $source = new $sourceClass($builder, ReleaseType::from($input->getOption('type')));
            $source->fetch();
            if ($input->getOption('unstable') && method_exists($source, 'fetchUnstable')) {
                $source->fetchUnstable();
            }
            $packages = $source->get()->getPackages();
            $packages = array_diff($packages, $target->get());

            $output->writeln('-> Submit new releases ('.count($packages).')');
            array_map(function (Package $package) use ($target, $output): void {
                $output->write("   {$package}... ");
                $target->add($package);
                $output->writeln('done');
            }, $packages);
        } catch (GitException $e) {
            var_dump($e->getRunnerResult()->toText());
            throw $e;
        }
    })
    ->run();
