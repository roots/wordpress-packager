name: Meta-package

on:
  workflow_call:
  workflow_dispatch:

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    outputs:
      tags-matrix: ${{ steps.tags-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ secrets.META_PACKAGE }}

      - name: Get upstream package name
        id: package
        run: echo "package-name=$(jq -r '.require | map_values(select(. == "self.version")) | keys[0]' composer.json)" >> $GITHUB_OUTPUT

      - name: Generate matrix from versions arrays
        id: tags-matrix
        uses: actions/github-script@v6
        env:
          PACKAGE: ${{ steps.package.outputs.package-name }}
          META: ${{ secrets.META_PACKAGE }}
        with:
          script: |
            const { PACKAGE, META } = process.env
            const [{ data: currrentTags }, { data: upstreamTags }] = await Promise.all([
              github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: META.substring(META.indexOf('/') + 1),
                per_page: 100,
              }),
              github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: PACKAGE.substring(PACKAGE.indexOf('/') + 1),
                per_page: 100,
              }),
            ])
            const targetTags = await Promise.allSettled(
              upstreamTags
                .filter((tag) => !currrentTags.find((t) => t.name === tag.name))
                .map((tag) =>
                  github.rest.git
                    .getRef({
                      owner: context.repo.owner,
                      repo: META.substring(META.indexOf('/') + 1),
                      ref: 'tags/' + tag.name,
                    })
                    .then(() => {})
                    .catch((res) => ({ tag: tag.name, status: res.status }))
                )
            )
            return targetTags
              .filter(({ value }) => value?.status === 404)
              .map(({ value }) => value.tag)

  tags:
    name: Tags
    runs-on: ubuntu-latest
    needs:
      - sync
    if: needs.sync.outputs.tags-matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJSON(needs.sync.outputs.tags-matrix) }}
    steps:
      - name: Generate token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          repository: ${{ secrets.META_PACKAGE }}
          token: ${{ steps.generate-token.outputs.token }}

      - name: Retrieve version notes
        id: notes
        uses: actions/github-script@v6
        env:
          VERSION: ${{ matrix.tag }}
        with:
          result-encoding: string
          script: |
            const slug = `version-${VERSION.replaceAll('.', '-')}`
            try {
              const res = await fetch('https://wordpress.org/documentation/wp-json/wp/v2/wordpress-versions?per_page=50')
              const data = await res.json()

              const release = data.find((tag) => tag.slug === slug)
              if (!release) { throw Error('Release not found') }

              const { link } = release
              const body = release.content?.rendered?.split('<h2', 4)[2]
              if (!body) { throw Error('Release body is empty or unexpected') }

              return `
            _Sourced from [WordPress.org Documentation](${link})._

            <h2${body}
            `
            } catch (e) {
              console.log(e)
              return `_Version notes available on [WordPress.org Documentation](https://wordpress.org/documentation/wordpress-version/${slug}/)._`
            }

      - name: Push tag
        env:
          TAG: ${{ matrix.tag }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "${TAG}" -m "${TAG}"
          git push origin "${TAG}"

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          repository: ${{ secrets.META_PACKAGE }}
          token: ${{ steps.generate-token.outputs.token }}
          body: ${{ steps.notes.outputs.result }}
          name: Version ${{ matrix.tag }}
          tag_name: ${{ matrix.tag }}
